// Knight's Tour Problem
// Algorithm - Backtracking
#include <stdio.h>
int dx[] = {2,1,-1,-2,-2,-1,1,2} , dy[] = {1,2,2,1,-1,-2,-2,-1};
int matrix[10][10];
bool valid(int row,int col,int N)
{
    if(row>=0&&row<N&&col>=0&&col<N)
        if(matrix[row][col]==-1) return true ;
    return false ;
}
bool solveKTUtil(int row,int col,int move,int N)
{
    if(N*N==move) return true ;

    for(int i=0;i<8;i++)
    {
        int nextRow = row+dx[i] ;
        int nextCol = col+dy[i];
        if(valid(nextRow,nextCol,N))
        {
            matrix[nextRow][nextCol]=move;
            if(solveKTUtil(nextRow,nextCol,move+1,N)) return true ;
            matrix[nextRow][nextCol]=-1;
        }
    }

    return false ;
}
bool solveKT(int N)
{
    for(int row=0;row<N;row++)
    {
        for(int col=0;col<N;col++)
        {
            matrix[row][col]=-1;
        }
    }

    matrix[0][0] = 0 ;
    if(solveKTUtil(0,0,1,N)) return true ;
    else return false ;
}
void printGrid(int N)
{
    for(int row=0;row<N;row++)
    {
        for(int col=0;col<N;col++)
        {
            printf(" %2d",matrix[row][col]);
        }
        puts("");
    }
}
int main()
{
    int N ; // N is the number of rows and columns .
    scanf("%d",&N);
    if(solveKT(N)) printGrid(N);
    else puts("Solution does not exist");
    return 0;
}
